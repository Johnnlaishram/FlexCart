// <auto-generated />
using System;
using FlexCart.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlexCart.Migrations
{
    [DbContext(typeof(OnlineDbContext))]
    partial class OnlineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlexCart.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Addr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("addr");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_name");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mobile");

                    b.Property<string>("Web")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("web");

                    b.HasKey("CompanyId")
                        .HasName("PK_Company");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.Customer", b =>
                {
                    b.Property<int>("CusId")
                        .HasColumnType("int")
                        .HasColumnName("cus_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CusId")
                        .HasName("PK_Customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.Product", b =>
                {
                    b.Property<int>("ProdCode")
                        .HasColumnType("int")
                        .HasColumnName("prod_code");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("barcode");

                    b.Property<DateTime?>("ManfDate")
                        .HasColumnType("datetime")
                        .HasColumnName("manf_date");

                    b.Property<string>("ProdName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prod_name");

                    b.Property<string>("ProdPhoto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prod_photo");

                    b.Property<int?>("ProdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prod_type_id");

                    b.HasKey("ProdCode")
                        .HasName("PK_Product");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.ProductType", b =>
                {
                    b.Property<int>("ProdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("prod_type_id");

                    b.Property<string>("ProdType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prod_type");

                    b.HasKey("ProdTypeId")
                        .HasName("PK_product type");

                    b.ToTable("product_type", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.Purchase", b =>
                {
                    b.Property<int>("PurCode")
                        .HasColumnType("int")
                        .HasColumnName("pur_code");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("net_amt");

                    b.Property<string>("PurchaseDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("purchase_date");

                    b.Property<string>("Purchaser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("purchaser");

                    b.Property<string>("VoucherFile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voucher_file");

                    b.HasKey("PurCode");

                    b.ToTable("purchase", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.PurchaseProduct", b =>
                {
                    b.Property<int>("PurProdCode")
                        .HasColumnType("int")
                        .HasColumnName("pur_prod_code");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_no");

                    b.Property<DateTime?>("MfgDate")
                        .HasColumnType("datetime")
                        .HasColumnName("mfg_date");

                    b.Property<int?>("PurCode")
                        .HasColumnType("int")
                        .HasColumnName("pur_code");

                    b.HasKey("PurProdCode")
                        .HasName("PK_purchase product");

                    b.ToTable("purchase_product", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.Return", b =>
                {
                    b.Property<int>("ReturnId")
                        .HasColumnType("int")
                        .HasColumnName("return_id");

                    b.Property<int?>("ProductCode")
                        .HasColumnType("int")
                        .HasColumnName("product_code");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("ReturnAmt")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("return_amt");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("return_date");

                    b.Property<string>("ReturnType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("return_type");

                    b.Property<string>("SalesCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sales_code");

                    b.Property<DateTime?>("SalesDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sales_date");

                    b.HasKey("ReturnId");

                    b.ToTable("returns", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.Sale", b =>
                {
                    b.Property<int>("SalesCode")
                        .HasColumnType("int")
                        .HasColumnName("sales_code");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("net_amt");

                    b.Property<decimal?>("PaidAmt")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("paid_amt");

                    b.Property<DateTime?>("SalesDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sales_date");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("SalesCode");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.SalesProduct", b =>
                {
                    b.Property<int>("SalesProCode")
                        .HasColumnType("int")
                        .HasColumnName("sales_pro_code");

                    b.Property<int?>("ProdCode")
                        .HasColumnType("int")
                        .HasColumnName("prod_code");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("rate");

                    b.Property<int?>("SalesCode")
                        .HasColumnType("int")
                        .HasColumnName("sales_code");

                    b.HasKey("SalesProCode")
                        .HasName("PK_sales product");

                    b.ToTable("sales_product", (string)null);
                });

            modelBuilder.Entity("FlexCart.Models.StockLevel", b =>
                {
                    b.Property<int>("StkId")
                        .HasColumnType("int")
                        .HasColumnName("stk_id");

                    b.Property<decimal?>("AvailableStock")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("available_stock");

                    b.Property<int?>("ProductCodes")
                        .HasColumnType("int")
                        .HasColumnName("product_codes");

                    b.HasKey("StkId");

                    b.ToTable("stock_level", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
